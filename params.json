{"tagline":"A simple MySQL abstraction and input validation library.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"## Set Up\r\n\r\nFirst of all you need to just move the \"toure\" folder into the base of\r\nyour app.\r\n\r\nIn order to get everything set up correctly we must first define our\r\nconstants in the conf.php file:\r\n\r\n    define('DB_HOST', ''); // your database host\r\n    define('DB_NAME', ''); // your database name\r\n    define('DB_USER', ''); // your database username\r\n    define('DB_PASS', ''); // your database password\r\n\r\nThere are also three additional settings:\r\n\r\n### Defult Users Table\r\n\r\n    define('DEFAULT_USERS_TABLE', 'users');\r\n\r\nthe above defines the default table that holds your users when dealing\r\nwith a user, password type situation it is 'users' by default.\r\n\r\n### Timestamps\r\n\r\n    define('TIMESTAMPS', true); \r\n\r\nif your tables follow a timestamp pattern ( they have created_at and\r\nupdated_at in every table) then setting this to true will automagically\r\ndeal with timestamps for you.\r\n\r\nIf you require timestamps on only select tables then set to false and\r\nspecify the columns explicitly during execution.\r\n\r\n### Secure\r\n\r\n    define('SECURE', true);\r\n\r\nif you would like to make use of the libraries encryption system then\r\nset this to true, whenever you insert into a column named password it\r\nwill automatically run Secure::make() and encrypt your password. If you\r\nare using this make sure that whenever you check your password you use\r\nSecure::check(); \r\n\r\n\r\n## Usage\r\n\r\n### Include\r\n\r\nBefore use use any of the libraries in our code we must first include\r\nthe libraries.\r\n\r\nThis is simple, in every file of code you want to use the library insert\r\nthe following at the top of your page:\r\n\r\n    include('toure/autoload');\r\n\r\nAll the classes will be autoloaded as and when they are needed.\r\n\r\n### Getting Started With The Database\r\n\r\nWe can create an instance ready for queries using the following:\r\n\r\n    $dbh = Database::make();\r\n\r\nNow we have access to everything via $dbh, the first thing that should\r\nbe done is the setting of our current table we plan use:\r\n\r\n    $dbh->table('posts');\r\n\r\nonce the table id set we can start to run our query methods inline:\r\n\r\n### Selecting\r\n\r\nSelecting can be done using the following:\r\n\r\n    $dbh->table('posts')->select('title', 'content')->row();\r\n\r\nThe second method `select();` allows us to specify columns to fetch, if\r\nthis is left blank it will select all. The second column specifies\r\nwhether to return the first `row();` or `all();` of the rows either the `row();`\r\nor `all();` method must be included to run the query. Toure will return an\r\nassoc array by default but we can specify it to return different data: \r\n\r\n    $dbh->table('posts')->select()->all('assoc');\r\n    $dbh->table('posts')->select()->all('num');\r\n    $dbh->table('posts')->select()->all('obj'); \r\n\r\nTo further our query we could use any of the conditional methods which\r\ncan be added one after another for easy readable usage:\r\n\r\n* where();\r\n* where_email();\r\n* or_();\r\n* and_();\r\n\r\nWhich can be used like so:\r\n\r\n    $dbh->table('posts')\r\n        ->select('title')\r\n        ->where('id', '=', '3')\r\n        ->or_('title', '=', 'something')\r\n        ->all();\r\n\r\nSo we can mix and match different conditionals for different results,\r\nthe `where();`, `or_();` and `and_();` methods take three params, the first being\r\nthe column the second being the condition and the last is the value.\r\n\r\nCheck out the class files for more documentation all methods are\r\ndocumented.\r\n\r\n### Inserting\r\n\r\nInserting is made extremely easy by toure, we can use the `insert();` method:\r\n\r\n    $dbh->table('posts')->insert();\r\n\r\nThe insert method takes an array like so:\r\n\r\n    $input = array(\r\n               'title' => 'This is our title',\r\n               'content' => 'This is our content'\r\n             );\r\n\r\n    $dbh->table('posts')->insert($input)->save();\r\n\r\nOur insert method will automagically insert the values into the columns\r\nspecified where the array key is the column and the array value is the\r\ninput value.\r\n\r\nIt is important to note here that when inserting or updating it is\r\nrequired to use `save();` or your insert or update will not be executed.\r\n\r\n### Updating\r\n\r\nUpdating is done in exactly the same way as inserting, i.e using an\r\narray but we just specify the column that needs to be updated like so: \r\n\r\n     $input = array(\r\n                'content' => 'This is our content'\r\n              );\r\n \r\n     $dbh->table('posts')->update($input)->save();\r\n\r\nThe difference with update though is that we will often require\r\ncondition otherwise if you where to execute the code above you would\r\nchange every row in the table so we can use the same conditionals as we\r\ndid in the select section.\r\n\r\n    $dbh->table('posts')->update($input)->where('id', '=', '3')->save();\r\n\r\n### Deleting \r\n\r\nDeleting can be dangerous so we have a few different methods available\r\nto us here. \r\n\r\n* `delete();`\r\n* `delete_id($id);`\r\n* `delete_all_where();`\r\n\r\nThe `delete();` method can be used just like the other CRUD operations\r\nusing the conditional methods but is allways limited to just 1 row for\r\nsafety. \r\n\r\nThe `delete_id();` method allows us to specify an id for deletion this\r\nagain is limited to just one row.\r\n\r\nThe `delete_all_where();` method allows us to delete multiple rows that\r\nmeet the condition.\r\n\r\n \r\n\r\n\r\n\r\n\r\n","name":"Toure"}